- name: Create an instance
  hosts: localhost
  gather_facts: false
  vars:
      gcp_project: schedule-405513
      gcp_cred_kind: serviceaccount
      gcp_cred_file: /var/lib/awx/projects/awxplay/schedule-405513-c7c0444c68c8.json
      zone: "us-central1-a" 
      region: "us-central1"
      postgres_root_user: root
      postgres_root_pass: pass
      allow_world_readable_tmpfiles: true 

  tasks:
   - name: create a disk
     gcp_compute_disk:
         name: 'disk-instance'
         size_gb: 20
         source_image: 'projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         state: present
     register: disk

   - name: create a address
     gcp_compute_address:
         name: 'awx-ansible-instance'
         region: "{{ region }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         state: present
     register: address

   - name: create a instance
     gcp_compute_instance:
         state: present
         name: test-vm
         machine_type: n1-standard-1
         disks:
           - auto_delete: true
             boot: true
             source: "{{ disk }}"
         network_interfaces:
             - network: null # use default
               access_configs:
                 - name: 'External NAT'
                   nat_ip: "{{ address }}"
                   type: 'ONE_TO_ONE_NAT'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
     register: instance
    
        - name: Update all packages to their latest version
        apt: name="*" update_cache=true force_apt_get=true cache_valid_time=3600

        - name: Upgrade all packages on servers
        ansible.builtin.apt:
          upgrade: dist
          force_apt_get: yes

        - name: Install required packages
        ansible.builtin.apt:
          name:
            - wget
            - python3-psycopg2
            - acl
          state: latest

        - name: Set up Postgres 14 repo
        shell: |
        echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        args:
        warn: no

        - name: Install postgresql
        ansible.builtin.apt:
        name: postgresql-14
        update_cache: yes
         notify:
        - Enable Postgresql

        - name: Ensure PostgreSQL is listening on *
         lineinfile:
        dest: /etc/postgresql/14/main/postgresql.conf
        regexp: '^listen_addresses\s*='
        line: "listen_addresses='*'"
        state: present
        notify: Restart Postgresql

        - name: Add new configuration to "pg_hba.conf"
         blockinfile:
        dest: /etc/postgresql/14/main/pg_hba.conf
        block: |
          host    all             all             0.0.0.0/0                md5
          host    all             all             ::/0                     md5
        notify: Restart Postgresql

        - name: Change peer identification to trust
        shell: /bin/sed -i '/^local/s/peer/trust/' /etc/postgresql/14/main/pg_hba.conf
        args:
        warn: no
        notify: Restart Postgresql

        - name: Create a Superuser PostgreSQL database user
        become: yes
         become_user: postgres
        postgresql_user:
        name: '{{ postgres_root_user }}'
        password: '{{ postgres_root_pass }}'
        role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
        encrypted: yes
        state: present

  handlers:
    - name: Restart Postgresql
      systemd:
        name: postgresql
        state: restarted

    - name: Start Postgresql
      systemd:
        name: postgresql
        state: started

    - name: Stop Postgresql
      systemd:
        name: postgresql
        state: stopped

    - name: Enable Postgresql
      systemd:
        name: postgresql
        enabled: yes

    - name: create a address Create Database from SQL File
      become: true
      postgresql_db:
        name: schedule
        login_user: "{{ postgres_root_user }}"
        login_password: "{{ postgres_root_pass }}"
        state: import
        target: "/var/lib/awx/projects/awxplay/variables/init.dump"

    - name: create a address Schedule SQL File to Run Every Minute
      become: true
      cron:
        name: Run SQL File Every Minute
        minute: "*"
        job: "psql -h localhost -U postgres -d mydatabase < /var/lib/awx/projects/awxplay/variables/query.sql "

       #   - name: Wait for SSH to come up
       #wait_for: host={{ address.address }} port=22 delay=10 timeout=60

       #   - name: Add host to groupname
       #     add_host: hostname={{ address.address }} groupname=new_instances


       #- name: Manage new instances
       # hosts: new_instances
       # connection: ssh
       #  become: True
